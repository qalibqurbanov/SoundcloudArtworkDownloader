<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>